{"version":3,"sources":["Editor.js","Preview.js","placeholder.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","className","id","onChange","this","props","inputHandler","value","currentValue","type","React","Component","inLineStyle","overflow","overflowY","Preview","markdown","parse","marked","style","placeholder","App","e","setState","input","target","state","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAEqBA,E,4JAEjB,WAEI,OACI,sBAAKC,UAAU,SAAf,UACI,oBAAIA,UAAU,cAAd,oBACA,0BAAUC,GAAG,SAASC,SAAUC,KAAKC,MAAMC,aAAcC,MAAOH,KAAKC,MAAMG,aACvEP,UAAU,YAAYQ,KAAK,qB,GARXC,IAAMC,W,yBCEpCC,EAAc,CAChBC,SAAU,SACVC,UAAW,UAGMC,E,4JAGjB,WACI,IAAMC,EAAWC,YAAMC,IAAOd,KAAKC,MAAMG,eAEzC,OACI,sBAAKP,UAAU,UAAf,UACI,oBAAIA,UAAU,cAAd,uBACA,qBAAKkB,MAAOP,EAAaV,GAAG,UAAUD,UAAU,YAAYQ,KAAK,YAAjE,SAA8EO,W,GATzDN,IAAMC,WCT9BS,EAAqB,omJCwCnBC,E,kDAhCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,aAAe,SAACgB,GACd,EAAKC,SAAS,CACZC,MAAOF,EAAEG,OAAOlB,SAflB,EAAKmB,MAAQ,CACXF,MAAO,IAGT,EAAKlB,aAAe,EAAKA,aAAaqB,KAAlB,gBAPH,E,qDAUnB,WACEvB,KAAKmB,SAAS,CACZC,MAAOJ,M,oBAUX,WACE,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQK,aAAcF,KAAKE,aAAcE,aAAcJ,KAAKsB,MAAMF,QAClE,cAAC,EAAD,CAAShB,aAAcJ,KAAKsB,MAAMF,e,GA3BxBd,IAAMC,WCKTiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df9763c1.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Editor extends React.Component{\n\n    render() {\n\n        return (\n            <div className=\"Editor\">\n                <h2 className=\"text-header\">Editor</h2>\n                <textarea id=\"editor\" onChange={this.props.inputHandler} value={this.props.currentValue}\n                    className=\"text-area\" type='text-area' />\n            </div>\n        )\n    }\n}","import React from 'react'\nimport marked from 'marked'\nimport parse from 'html-react-parser'\n\nconst inLineStyle = {\n    overflow: 'hidden',\n    overflowY: 'scroll'\n}\n\nexport default class Preview extends React.Component {\n\n\n    render() {\n        const markdown = parse(marked(this.props.currentValue))\n\n        return (\n            <div className=\"Preview\">\n                <h2 className=\"text-header\">Previewer</h2>\n                <div style={inLineStyle} id=\"preview\" className=\"text-area\" type='text-area'>{markdown}</div>\n            </div>\n        )\n    }\n}","export const placeholder =  {text: `---\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\n  resize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with \\`+\\`, \\`-\\`, or \\`*\\`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as \\`1.\\`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline \\`code\\`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of \\`markdown-it\\` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [<ins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [<mark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n`}","import React from 'react';\nimport './App.css';\nimport Editor from './Editor.js'\nimport Preview from './Preview.js'\nimport { placeholder } from './placeholder.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      input: ''\n    }\n\n    this.inputHandler = this.inputHandler.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      input: placeholder.text\n    })\n  }\n\n  inputHandler = (e) => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Editor inputHandler={this.inputHandler} currentValue={this.state.input} />\n        <Preview currentValue={this.state.input} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}